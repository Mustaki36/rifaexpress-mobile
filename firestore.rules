
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Function to check if a user has a specific role
    function isRole(role) {
      return get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == role;
    }

    // Raffles can be read by anyone, but only created/edited by authorized users
    match /raffles/{raffleId} {
      allow read: if true;
      allow create: if request.auth != null && (isRole('creator') || isRole('admin'));
      allow update: if request.auth != null && (isRole('creator') || isRole('admin'));
      allow delete: if request.auth != null && isRole('admin');
    }

    // Results can be read by anyone, but only created/deleted by admins
    match /results/{resultId} {
      allow read: if true;
      allow create, delete: if request.auth != null && isRole('admin');
    }

    // Users can be read by any authenticated user, but only modified by themselves or an admin
    match /usuarios/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId || isRole('admin');
      allow delete: if request.auth != null && isRole('admin');
      // Admins can list all users
      allow list: if request.auth != null && isRole('admin');
    }

    // Reservations can only be created/managed by the user who owns them
    match /reservations/{reservationId} {
      allow read, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      // Allow querying by raffleId as long as the user is authenticated
      allow list: if request.auth != null;
    }
    
    // Blocked users list can only be managed by admins
    match /blockedUsers/{blockedId} {
      allow list, read, create, update, delete: if request.auth != null && isRole('admin');
    }
  }
}
    