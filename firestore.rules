
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    
    function getUserRole() {
      return get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role;
    }

    // RAFFLES: Public can read, creators/admins can write.
    match /raffles/{raffleId} {
      allow read: if true;
      allow create: if isAuth() && (getUserRole() == 'creator' || getUserRole() == 'admin');
      allow update: if isAuth() && (request.auth.uid == resource.data.creatorId || getUserRole() == 'admin');
      allow delete: if isAuth() && (request.auth.uid == resource.data.creatorId || getUserRole() == 'admin');
    }

    // USUARIOS: Users can manage their own profile. Admins can manage any.
    match /usuarios/{userId} {
      allow read: if isAuth();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || getUserRole() == 'admin';
      allow delete: if isOwner(userId) || getUserRole() == 'admin';
    }

    // RESULTS: Public can read, only backend/admin can write.
    match /results/{resultId} {
      allow read: if true;
      allow write: if isAuth() && getUserRole() == 'admin';
    }

    // BLOCKED USERS: Only admins can access.
    match /blockedUsers/{blockId} {
      allow read, write: if isAuth() && getUserRole() == 'admin';
    }

    // RESERVATIONS: Users can only manage their own reservations.
    match /reservations/{reservationId} {
      // Allow reading only if the user is the owner of the reservation.
      // This rule works with the more specific client-side query.
      allow read: if isOwner(resource.data.userId);
      allow list: if isAuth(); // Necessary for queries with 'where' clauses.
      allow create: if isAuth() && isOwner(request.resource.data.userId);
      allow delete: if isAuth() && isOwner(resource.data.userId);
    }
  }
}

    