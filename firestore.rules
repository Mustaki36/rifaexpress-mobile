
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Reglas para la colección 'raffles'
    match /raffles/{raffleId} {
      // Cualquiera puede leer la lista de rifas y sus detalles.
      allow read: if true;
      
      // Solo usuarios autenticados con rol de 'creator' o 'admin' pueden crear.
      allow create: if request.auth != null && (get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'creator' || get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin');
      
      // Solo el creador original o un admin pueden actualizar. Nadie puede borrar.
      allow update: if request.auth != null && (resource.data.creatorId == request.auth.uid || get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin');
      allow delete: if request.auth != null && get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin';
    }

    // Reglas para la colección 'usuarios'
    match /usuarios/{userId} {
        // Un usuario puede crear su propia cuenta. Los administradores pueden crear usuarios.
        allow create: if request.auth.uid == userId || (request.auth != null && get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin');

        // Los usuarios pueden leer su propia información. Los admins pueden leer cualquier perfil.
        allow read: if request.auth.uid == userId || (request.auth != null && get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin');
        
        // Un usuario solo puede actualizar su propia información. Un admin puede actualizar cualquier perfil.
        allow update: if request.auth.uid == userId || (request.auth != null && get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin');
        
        // Solo un administrador puede eliminar un usuario (y no a sí mismo).
        allow delete: if request.auth != null && get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin' && request.auth.uid != userId;
    }
    
    // Reglas para la colección 'reservations'
    match /reservations/{reservationId} {
      // Solo un usuario autenticado puede crear/borrar sus propias reservas.
      allow create, delete: if request.auth != null && request.resource.data.userId == request.auth.uid;

      // La consulta de lista es permitida si filtra por usuario, o si el solicitante es admin.
      allow list: if request.auth != null && (request.query.resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin');

      // Un usuario solo puede leer sus propias reservas. Un admin puede leer cualquiera.
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin');
    }
    
    // Reglas para la colección 'results'
    match /results/{resultId} {
      // Cualquiera puede leer los resultados de sorteos pasados.
      allow read: if true;
      // Solo un admin puede crear o borrar resultados.
      allow create, delete: if request.auth != null && get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin';
    }
    
     // Reglas para la colección 'blockedUsers'
    match /blockedUsers/{userId} {
      // Solo los administradores pueden gestionar la lista de bloqueo.
      allow read, write, create, delete: if request.auth != null && get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
