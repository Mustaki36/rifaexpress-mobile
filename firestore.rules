
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getRole() {
      return get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role;
    }

    function isAdmin() {
      return isAuth() && getRole() == 'admin';
    }

    function isCreator() {
      return isAuth() && (getRole() == 'creator' || getRole() == 'admin');
    }

    // Publicly readable collections
    match /raffles/{raffleId} {
      allow read: if true;
      allow create: if isCreator();
      // Logic to prevent editing sold tickets is in the app, but rules secure who can edit.
      allow update: if isAuth() && (resource.data.creatorId == request.auth.uid || isAdmin());
      allow delete: if isAuth() && (resource.data.creatorId == request.auth.uid || isAdmin());
    }

    match /results/{resultId} {
        allow read: if true;
        allow create, delete: if isAdmin();
    }

    // User-specific collections
    match /usuarios/{userId} {
      // Anyone can see basic profile info
      allow read: if true;
      // Only the owner or an admin can create/update their profile
      allow create, update: if isAuth() && (isOwner(userId) || isAdmin());
      // Only an admin can delete a user profile (for now)
      allow delete: if isAdmin();
    }

    match /reservations/{reservationId} {
        // A user can create a reservation for themselves.
        allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
        // A user can only read or delete their own reservations.
        allow read, delete: if isAuth() && resource.data.userId == request.auth.uid;
    }
    
    match /blockedUsers/{blockedId} {
        // Only admins can manage the block list
        allow read, create, update, delete: if isAdmin();
    }
  }
}
