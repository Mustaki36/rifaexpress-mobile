rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getRole() {
      // Check if the user document exists before trying to access its data.
      return exists(/databases/$(database)/documents/usuarios/$(request.auth.uid)) ? get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role : '';
    }

    function isAdmin() {
      return isAuth() && getRole() == 'admin';
    }

    // Allow admins to read/write anything
    match /{document=**} {
      allow read, write: if isAdmin();
    }

    match /raffles/{raffleId} {
      allow read: if true;
      allow create: if isAuth() && (request.resource.data.creatorId == request.auth.uid || isAdmin());
      // Allow update if user is the creator/admin, or if they are only adding to soldTickets (buying a ticket)
      allow update: if isAuth() && (
        (resource.data.creatorId == request.auth.uid || isAdmin()) ||
        (request.resource.data.keys().hasAll(['soldTickets']) && request.resource.data.soldTickets.size() > resource.data.soldTickets.size())
      );
      allow delete: if isAuth() && (resource.data.creatorId == request.auth.uid || isAdmin());
    }

    match /usuarios/{userId} {
      allow read: if isAuth();
      allow create: if isAdmin(); // Fix: Allow admins to create user documents.
      allow update: if isOwner(userId);
      allow delete: if isAdmin();
    }

    match /reservations/{reservationId} {
      allow list, read: if isAuth();
      allow create, delete: if isAuth() && request.resource.data.userId == request.auth.uid;
    }

    match /results/{resultId} {
        allow read: if true;
        allow create, delete: if isAdmin();
    }
    
    match /blockedUsers/{blockedId} {
        allow read, list, create, update, delete: if isAdmin();
    }
  }
}

    