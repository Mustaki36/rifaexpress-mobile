rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // Allow public read for raffles and results
    match /raffles/{raffleId} {
      allow read: if true;
      allow create: if request.auth != null; // Any authenticated user can create
      allow update: if request.auth != null && (request.auth.uid == resource.data.creatorId || request.auth.uid == 'admin-user-id'); // Only creator or admin can update
      allow delete: if request.auth != null && (request.auth.uid == resource.data.creatorId || request.auth.uid == 'admin-user-id'); // Only creator or admin can delete
    }

    match /results/{resultId} {
        allow read: if true;
        allow write: if request.auth != null && request.auth.uid == 'admin-user-id'; // Only admin can write results
    }

    // Users can only read/write their own data, but admin can access all
    match /usuarios/{userId} {
      allow read, update, delete: if request.auth != null && (request.auth.uid == userId || request.auth.uid == 'admin-user-id');
      allow create: if request.auth != null || request.auth.uid == 'admin-user-id'; // Allow user creation
    }

    // Only admin can read/write the full list of users
    match /usuarios/{document=**} {
        allow list: if request.auth != null && request.auth.uid == 'admin-user-id';
    }

    // Reservations can only be managed by authenticated users for themselves
    match /reservations/{reservationId} {
        allow read, write: if request.auth != null;
    }

    // Blocked users list is admin-only
    match /blockedUsers/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == 'admin-user-id';
    }
  }
}
