
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Allow public read access to raffles, but restrict writes to creators/admins
    match /raffles/{raffleId} {
      allow read: if true;
      allow create: if request.auth != null && (get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'creator' || get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin');
      allow update, delete: if request.auth != null && get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin';
    }

    // Users can only manage their own profile, but anyone can read basic user info (like names for display)
    match /usuarios/{userId} {
      allow read: if true;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId || get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin';
      allow delete: if get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin';
    }

    // Allow public read access to results
    match /results/{resultId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Reservations can only be read/written by the user who created them
    match /reservations/{reservationId} {
      allow read, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null;
    }

    // Only admins can view or modify the blocked users list
    match /blockedUsers/{userId} {
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
