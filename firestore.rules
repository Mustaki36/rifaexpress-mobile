
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    match /raffles/{raffleId} {
      // Cualquiera puede ver las rifas.
      allow read: if true;
      
      // Solo usuarios autenticados pueden actualizar una rifa (para comprar boletos).
      // La creación y eliminación debe ser manejada por roles específicos en la lógica de la app.
      allow update: if isAuth();
      
      // Nadie puede crear o borrar directamente desde el cliente sin una lógica de rol más compleja (manejada por la app).
      allow create, delete: if false;
    }

    match /reservations/{reservationId} {
        // Un usuario puede crear una reservación si el `userId` en el nuevo documento es el suyo.
        allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
        
        // Un usuario solo puede leer o eliminar una reservación si es el propietario.
        allow read, delete: if isAuth() && resource.data.userId == request.auth.uid;

        // La consulta de la colección (list) requiere una regla más permisiva a nivel de colección,
        // pero las reglas de 'read' individuales aseguran que solo se devuelvan los documentos propios.
        allow list: if isAuth();
    }

    match /usuarios/{userId} {
        // Cualquiera puede leer perfiles de usuario (para ver nombres, etc.).
        allow read: if true;
        
        // Un usuario solo puede actualizar su propio perfil.
        allow update: if isOwner(userId);

        // Nadie puede crear o borrar usuarios directamente desde el cliente.
        // Esto debe ser manejado por la autenticación de Firebase y funciones seguras.
        allow create, delete: if false;
    }

    match /results/{resultId} {
      // Cualquiera puede ver los resultados de las rifas.
      allow read: if true;
      allow write: if false; // Los resultados no deben ser modificables desde el cliente.
    }

    match /blockedUsers/{blockedUserId} {
        // Nadie debe poder leer o escribir en la lista de bloqueo desde el cliente.
        // Esto debe ser manejado solo por el admin a través de la lógica de la app (que internamente usa credenciales de admin).
        allow read, write: if false;
    }
  }
}
