
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAppAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAppAuthenticated() && request.auth.uid == userId;
    }

    function getUserRole(userId) {
      return get(/databases/$(database)/documents/usuarios/$(userId)).data.role;
    }

    function isAdmin(userId) {
      return getUserRole(userId) == 'admin';
    }

    function isCreator(userId) {
      return getUserRole(userId) == 'creator';
    }

    // RAFFLES: Public read, creators/admins can create, only admins can edit/delete
    match /raffles/{raffleId} {
      allow read: if true;
      allow create: if isAppAuthenticated() && (isCreator(request.auth.uid) || isAdmin(request.auth.uid));
      // Only admin can update raffle details like description, image, etc.
      // Ticket purchases are handled via a different logic (e.g., Cloud Function or transaction)
      allow update: if isAppAuthenticated() && isAdmin(request.auth.uid);
      allow delete: if isAppAuthenticated() && isAdmin(request.auth.uid);
    }

    // RESULTS: Public read, only admins can manage
    match /results/{resultId} {
      allow read: if true;
      allow write: if isAppAuthenticated() && isAdmin(request.auth.uid);
    }

    // USERS: Authenticated users can read profiles. Users can edit their own profile. Admins can edit/delete any.
    match /usuarios/{userId} {
      allow read: if isAppAuthenticated();
      allow create: if isOwner(userId); // Allows a user to create their own document after signing up
      allow update: if isOwner(userId) || isAdmin(request.auth.uid);
      allow delete: if isAdmin(request.auth.uid);
    }
    
    // RESERVATIONS: Users can only read/write their own reservations
    match /reservations/{reservationId} {
      allow read, delete: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
    }
    
    // BLOCKED USERS: Only admins can read or write
    match /blockedUsers/{blockedId} {
      allow read, write: if isAppAuthenticated() && isAdmin(request.auth.uid);
    }
  }
}
