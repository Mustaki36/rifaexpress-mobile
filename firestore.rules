
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for admin role
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/usuarios/$(userId)).data.role == 'admin';
    }

    // Raffles: Publicly readable, only creators/admins can create, only admins can edit/delete
    match /raffles/{raffleId} {
      allow read: if true;
      allow create: if request.auth != null && (get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'creator' || isAdmin(request.auth.uid));
      allow update: if request.auth != null && (get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.creatorId == request.auth.uid || isAdmin(request.auth.uid));
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Results: Publicly readable, only admins can manage
    match /results/{resultId} {
      allow read: if true;
      allow create, delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // User Profiles: Readable by any authenticated user, but only writable by the owner or an admin
    match /usuarios/{userId} {
      allow read: if request.auth != null; 
      allow create: if request.auth.uid == userId; 
      allow update: if request.auth.uid == userId || isAdmin(request.auth.uid);
      // Admin can't delete other admins
      allow delete: if request.auth != null && isAdmin(request.auth.uid) && resource.data.role != 'admin';
    }

    // Reservations: Users can only manage their own reservations
    match /reservations/{reservationId} {
      allow read, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Blocked Users: Only accessible by admins
    match /blockedUsers/{blockedId} {
      allow read, create, update, delete: if request.auth != null && isAdmin(request.auth.uid);
    }
  }
}
