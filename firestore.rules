
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getUserRole(userId) {
      return get(/databases/$(database)/documents/usuarios/$(userId)).data.role;
    }

    function isAdmin() {
      // Check if the user is authenticated and their role is 'admin' in the 'usuarios' collection
      return isSignedIn() && getUserRole(request.auth.uid) == 'admin';
    }

    function isCreator() {
      return isSignedIn() && getUserRole(request.auth.uid) == 'creator';
    }

    // Raffles can be read by anyone, but only created/updated by creators or admins.
    // Deletion is restricted to admins to prevent accidental data loss.
    match /raffles/{raffleId} {
      allow read: if true;
      allow create: if isCreator() || isAdmin();
      // Allow updates if the user is the original creator or an admin.
      allow update: if (isOwner(resource.data.creatorId) && isCreator()) || isAdmin();
      allow delete: if isAdmin();
    }

    // Users can only read their own profile.
    // They can update their own data.
    // Admins can read/write any user profile.
    match /usuarios/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if true; // Anyone can sign up
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Allow admins to list all users
    match /usuarios/{document=**} {
      allow list: if isAdmin();
    }

    // Reservations can be created/deleted by any signed-in user.
    // Users can only read their own reservations.
    // This prevents one user from seeing who else has reserved tickets.
    match /reservations/{docId} {
      allow read, delete, create: if isSignedIn() && isOwner(request.resource.data.userId);
      // Add a rule to allow listing reservations only with a userId filter
      allow list: if isSignedIn() && request.query.get('where')[0][0] == 'userId';
    }

    // Results can be read by anyone, but only created/deleted by admins.
    match /results/{resultId} {
      allow read: if true;
      allow create, delete: if isAdmin();
    }

    // Blocked users list can only be managed by admins.
    match /blockedUsers/{docId} {
      allow read, write, delete: if isAdmin();
    }
  }
}
