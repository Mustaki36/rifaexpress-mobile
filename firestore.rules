
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Raffles can be read by anyone, but only created/edited by creators or admins.
    match /raffles/{raffleId} {
      allow read: if true;
      allow create: if request.auth != null && (request.auth.token.role == 'creator' || request.auth.token.role == 'admin');
      allow update, delete: if request.auth != null && (resource.data.creatorId == request.auth.uid || request.auth.token.role == 'admin');
    }

    // Users can only manage their own profile. Admins can view all profiles.
    match /usuarios/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin');
      allow create: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == userId;
      // Deletion might be an admin-only task.
      allow delete: if get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Reservations can be read by any authenticated user.
    // This allows clients to know which tickets are currently reserved by others.
    // Writes (create/delete) are restricted to the user who owns the reservation.
    match /reservations/{reservationId} {
      allow read: if request.auth != null;
      allow create, delete: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Results can be read by anyone. They should only be created by a secure server process (or admin).
    match /results/{resultId} {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin';
    }

    // Blocked users list should be admin-only.
    match /blockedUsers/{blockedId} {
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
