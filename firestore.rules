
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user has a specific role
    function isRole(role) {
      return get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == role;
    }
    
    // Helper function to check if a user is an admin
    function isAdmin() {
      return isRole('admin');
    }

    // Helper function to check if a user is a creator
    function isCreator() {
      return isRole('creator');
    }

    // Raffles can be read by anyone, but only created/updated by creators and admins.
    match /raffles/{raffleId} {
      allow read: if true;
      allow create: if request.auth != null && (isCreator() || isAdmin());
      allow update: if request.auth != null && (isCreator() || isAdmin());
      allow delete: if request.auth != null && isAdmin();
    }

    // Users can only read their own data. They can create their own user document. Admins can read all.
    match /usuarios/{userId} {
      allow read: if request.auth.uid == userId || isAdmin();
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId || isAdmin();
      allow delete: if isAdmin();
    }

    // Blocked users list is only readable and writable by admins.
    match /blockedUsers/{docId} {
      allow read, write: if request.auth != null && isAdmin();
    }

    // Results can be read by anyone, but only written by admins (server-side process).
    match /results/{docId} {
       allow read: if true;
       allow write: if request.auth != null && isAdmin();
    }
    
    // Reservations can only be read/written by the user who created them or by an admin.
    match /reservations/{docId} {
        allow read: if request.auth != null; // Query is filtered by raffleId, so this is safe.
        allow create: if request.auth != null;
        allow delete: if request.auth != null && (request.auth.uid == resource.data.userId || isAdmin());
    }
  }
}
