rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Allow public read access to raffles and results
    match /raffles/{raffleId} {
      allow read: if true;
      allow create: if request.auth != null && (get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'creator' || get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin');
      // Admin can update any raffle. Creator can only update their own.
      allow update: if request.auth != null && (get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin' || request.resource.data.creatorId == request.auth.uid);
      // Admin can delete any raffle. Creator can only delete their own.
      allow delete: if request.auth != null && (get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin' || resource.data.creatorId == request.auth.uid);
    }

    match /results/{resultId} {
      allow read: if true;
      // Only admin can create or delete results for now to ensure integrity.
      allow create, delete: if request.auth != null && get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin';
    }

    // Secure user data
    match /usuarios/{userId} {
      allow read: if request.auth != null; // Any authenticated user can read basic user profiles.
      allow create: if request.auth.uid == userId; // User can create their own profile document.
      allow update: if request.auth.uid == userId || get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin'; // User can update their own profile, or admin can.
      allow delete: if get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin'; // Only admin can delete users.
    }

    // Secure reservations
    match /reservations/{reservationId} {
      // User can only manage their own reservations.
      allow read, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Secure blocked users list - Only admins can manage this.
    match /blockedUsers/{blockedId} {
      allow read, create, update, delete: if request.auth != null && get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
