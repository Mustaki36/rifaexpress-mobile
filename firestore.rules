rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      // In a real app, this might check a custom claim or a document.
      // For this mock app, we check against a hardcoded admin UID.
      return request.auth != null && request.auth.uid == 'admin-user-id';
    }

    // Raffles are public to read, but only authenticated users can create/update.
    match /raffles/{raffleId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if request.auth != null && (resource.data.creatorId == request.auth.uid || isAdmin());
    }

    // Results are public to read. Writes should ideally be handled by a secure backend process.
    match /results/{resultId} {
      allow read: if true;
      allow write: if false; 
    }

    // User data can be read by any authenticated user, but only the user themselves or an admin can write.
    match /usuarios/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (request.auth.uid == userId || isAdmin());
    }
    
    // Reservations can only be managed by authenticated users.
    match /reservations/{reservationId} {
      allow read, write, delete: if request.auth != null;
    }

    // Blocked users list is read-only for clients, managed by admin functions or server-side logic.
    match /blockedUsers/{blockedId} {
      allow read: if request.auth != null;
      allow write: if false;
    }
  }
}
