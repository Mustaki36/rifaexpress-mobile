rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions to make rules more readable.
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getResourceData() {
      return resource.data;
    }
    
    function getRequestData() {
        return request.resource.data;
    }
    
    function isAdmin() {
        // Correctly check the role of the user making the request from their own document.
        // This can only be reliably used for READ rules. For WRITE rules, we must trust client-side logic
        // and secure it with Firestore rules on the target collection.
        return get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for the 'raffles' collection
    match /raffles/{raffleId} {
      // Anyone can read a raffle.
      allow read: if true;
      
      // Only authenticated 'creator' or 'admin' users can create a raffle.
      allow create: if isAuth() && (getRequestData().creatorId == request.auth.uid || isAdmin());

      // An admin can update any raffle. A creator can only update their own raffle.
      allow update: if isAuth() && (isAdmin() || getResourceData().creatorId == request.auth.uid);
      
      // Only an admin or the creator can delete a raffle.
      allow delete: if isAuth() && (isAdmin() || getResourceData().creatorId == request.auth.uid);
    }
    
    // Rules for the 'users' collection
    match /usuarios/{userId} {
        // An admin can read any user profile. A user can read their own profile.
        allow read: if isAuth() && (isAdmin() || isOwner(userId));

        // An admin can create any user. Any user can create their own profile (signup).
        allow create: if isAuth();

        // An admin can update any user profile. A user can only update their own.
        allow update: if isAuth() && (isAdmin() || isOwner(userId));
        
        // Only an admin can delete a user, but not themselves.
        allow delete: if isAuth() && isAdmin() && !isOwner(userId);
    }

    // Rules for ticket reservations
    match /reservations/{reservationId} {
        // Allow creating a reservation if the user is authenticated and the reservation is for themselves.
        allow create: if isAuth() && getRequestData().userId == request.auth.uid;
        
        // Users can read and delete their own reservations. Admins can read any.
        allow read: if isAuth() && (isOwner(getResourceData().userId) || isAdmin());
        allow delete: if isAuth() && isOwner(getResourceData().userId);
        
        // No updates allowed to reservations. They are created and deleted.
        allow update: if false;
    }
    
    // Rules for the 'results' collection
    match /results/{resultId} {
        // Anyone can read the results.
        allow read: if true;
        
        // Only an admin can create, update, or delete results.
        allow write: if isAuth() && isAdmin();
    }
    
    // Rules for the 'blockedUsers' collection
    match /blockedUsers/{blockedId} {
        // Only admins can read or write to the blocked users list.
        allow read, write: if isAuth() && isAdmin();
    }
  }
}
