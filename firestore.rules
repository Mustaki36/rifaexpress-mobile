rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // HELPER FUNCTIONS
    function isAuth() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    // RULES FOR USERS
    match /usuarios/{userId} {
      allow read: if isAuth();
      allow create: if isAuth(); // Allows signup
      allow update: if isOwner(userId) && request.resource.data.keys().hasOnly(['name', 'email', 'phone', 'address', 'avatar', 'tickets', 'mustChangePassword', 'password', 'role', 'isVerified', 'createdAt']);
      allow delete: if false; // Users cannot delete their own accounts from the client
    }

    // RULES FOR RAFFLES
    match /raffles/{raffleId} {
      allow read: if true; // Anyone can see the raffles
      allow create: if isAuth(); // Only authenticated users (logic in app limits to creator/admin)
      
      // Allow updates if the user is authenticated and only specific fields are being changed.
      // This allows ticket purchases (updating soldTickets) and edits by creators.
      allow update: if isAuth() && request.resource.data.keys().hasOnly(['soldTickets', 'status', 'title', 'description', 'prize', 'image', 'aiHint', 'drawDate', 'totalTickets', 'ticketPrice', 'creatorId', 'createdAt']);
      
      allow delete: if isAuth(); // Logic in app limits to creator/admin
    }

    // RULES FOR RESERVATIONS
    match /reservations/{reservationId} {
      // Users can only see their own reservations, but the query needs to be able to scan.
      // The query in the app is now specific enough to only ask for the user's own reservations.
      allow list, read: if isAuth() && resource.data.userId == request.auth.uid;
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
      allow delete: if isAuth() && resource.data.userId == request.auth.uid;
    }

    // RULES FOR RESULTS
    match /results/{resultId} {
      allow read: if true; // Anyone can see results
      allow create, update, delete: if false; // Should only be created by a secure backend/admin tool
    }

    // RULES FOR BLOCKED USERS
    match /blockedUsers/{blockedId} {
       // Only admins should interact with this collection, which should be enforced by app logic.
       // For maximum security, these rules are restrictive. A real app would use custom claims for admins.
       allow read, create, update, delete: if isAuth();
    }
  }
}