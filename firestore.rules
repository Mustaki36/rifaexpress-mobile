rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Raffles: Publicly readable, only authenticated can create, only creator/admin can update/delete.
    match /raffles/{raffleId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (resource.data.creatorId == request.auth.uid || get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin');
      allow delete: if request.auth != null && (resource.data.creatorId == request.auth.uid || get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin');
    }

    // Results: Publicly readable.
    match /results/{resultId} {
      allow read: if true;
      allow create: if request.auth != null && get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin';
      allow delete: if request.auth != null && get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin';
    }

    // User Profiles: Users can only read/write their own data. Admins can do anything.
    match /usuarios/{userId} {
      allow read, update: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin');
      allow create: if request.auth != null;
      allow delete: if request.auth != null && get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin';
    }
    
    match /usuarios/{document=**} {
      allow list: if request.auth != null && get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin';
    }

    // Reservations: Only authenticated users can access their own reservations.
    match /reservations/{docId} {
      allow read, create: if request.auth != null;
      allow delete: if request.auth != null && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin');
      // Listing reservations is implicitly disallowed for non-admins by Firestore's query rules.
      // A user can only query for reservations where their UID matches.
    }

    // Blocked Users: Only admins can access.
    match /blockedUsers/{docId} {
      allow read, create, delete, list: if request.auth != null && get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
